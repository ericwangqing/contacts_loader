/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package yoyo.android.contacts.loader;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBlob;

import android.app.Activity;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.provider.CallLog;
import android.provider.ContactsContract;

@Kroll.module(name = "ContactsLoader", id = "yoyo.android.contacts.loader")
public class ContactsLoaderModule extends KrollModule {

	// Standard Debugging variables
	private static final String LCAT = "ContactsLoaderModule";
	private static final boolean DBG = TiConfig.LOGD;
	private List<Contact> contacts;
	private Map<String, Contact> phoneContactMap;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public ContactsLoaderModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is
		// created
	}

	// Methods
	@Kroll.method
	public KrollDict[] getAllContacts() {
		getContactsWithNamePhonesAvatarAndCallLogInfo();
		sortContacts();
		return getKrollDictsResult();
	}

	@SuppressWarnings("unchecked")
	private void sortContacts() {
		computRankScore();
		Collections.sort(contacts);
	}

	private void computRankScore() {
		for (Iterator<Contact> iterator = contacts.iterator(); iterator.hasNext();) {
			Contact contact = iterator.next();
			contact.updateRankScore();
		}
	}

	private void getContactsWithNamePhonesAvatarAndCallLogInfo() {
		getContactsWithNamePhonesAvatar();
		addCallLogInfo();
	}

	private void addCallLogInfo() {
		initialPhoneContactMap();
		Cursor cursor = getActivity().managedQuery(CallLog.Calls.CONTENT_URI, null, null, null, null);
		while (cursor.moveToNext()) {
			String phoneNumber = cursor.getString(cursor.getColumnIndex(CallLog.Calls.NUMBER));
			String callType = cursor.getString(cursor.getColumnIndex(CallLog.Calls.TYPE));
			Date callDateTime = new Date(cursor.getLong(cursor.getColumnIndex(CallLog.Calls.DATE)));
			Long callDuration = cursor.getLong(cursor.getColumnIndex(CallLog.Calls.DURATION));
			Contact contact = phoneContactMap.get(phoneNumber);
			if(contact != null){
				contact.callInfo.aggregate(phoneNumber, callType, callDateTime, callDuration);
			}else{
				// call from/with not contact
			}
		}
		cursor.close();
	}

	private void initialPhoneContactMap() {
		phoneContactMap = new HashMap<String, Contact>();
		for (Iterator<Contact> iterator = contacts.iterator(); iterator.hasNext();) {
			Contact contact = iterator.next();
			for (Iterator<String> i = contact.phones.iterator(); i.hasNext();) {
				String phone = i.next();
				phoneContactMap.put(phone, contact);
			}
		}
	}

	private void getContactsWithNamePhonesAvatar() {
		contacts = new ArrayList<Contact>();
		Activity activity = getActivity();
		Cursor cursor = activity.managedQuery(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
		if (cursor.getCount() > 0) {
			while (cursor.moveToNext()) {
				Contact contact = new Contact();
				contact.id = cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts._ID));
				contact.name = cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));
				if (hasPhones(cursor)) {
					getPhones(contact);
					contact.avatar = convertBitmapToTiBlob(loadContactPhoto(contact));
//					Log.d(LCAT, "the contact " + contact.name + " loaded photo is: " + contact.avatar);
					contacts.add(contact);
				}
			}
		}
	}

	private KrollDict[] getKrollDictsResult() {
		List<KrollDict> result = new ArrayList<KrollDict>();
		for (Iterator<Contact> iterator = contacts.iterator(); iterator.hasNext();) {
			Contact contact = iterator.next();
			KrollDict dict = new KrollDict();
			dict.put("name", contact.name);
			dict.put("phones", contact.phones.toArray(new String[contact.phones.size()]));
			dict.put("recentNumber", contact.callInfo.recentNumber);
			dict.put("avatar", contact.avatar);
			dict.put("amountOfCalls", contact.callInfo.amountOfCalls);
			dict.put("amountOfIncomeCalls", contact.callInfo.amountOfIncomCalls);
			dict.put("amountOfOutcomeCalls", contact.callInfo.amountOfOutcomCalls);
			dict.put("amountOfDuration", contact.callInfo.amountOfDuration);
			dict.put("amountOfIncomeDuration", contact.callInfo.amountOfIncomeDuration);
			dict.put("amountOfOutcomeDuration", contact.callInfo.amountOfOutcomeDuration);
			dict.put("missedCalls", contact.callInfo.missedCalls);
			result.add(dict);
		}
		return result.toArray(new KrollDict[result.size()]);
	}

	private TiBlob convertBitmapToTiBlob(Bitmap contactPhoto) {
		TiBlob avatar = contactPhoto == null ? null : TiBlob.blobFromImage(contactPhoto);
		return avatar;
	}

	private boolean hasPhones(Cursor cursor) {
		return Integer.parseInt(cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER))) > 0;
	}

	private void getPhones(Contact contact) {
		Activity activity = getActivity();
		Cursor pCur = activity.managedQuery(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null,
				ContactsContract.CommonDataKinds.Phone.CONTACT_ID + " = ?", new String[] { contact.id }, null);
		while (pCur.moveToNext()) {
			String phone = pCur.getString(pCur.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
			contact.phones.add(phone);
		}
		pCur.close();
	}

	private Bitmap loadContactPhoto(Contact contact) {
		ContentResolver cr = getActivity().getContentResolver();
		Long id = Long.parseLong(contact.id);
		Uri uri = ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI, id);
		// Log.d(LCAT, "the uri of photo is: " + uri.toString());
		InputStream input = ContactsContract.Contacts.openContactPhotoInputStream(cr, uri);
		Bitmap result = BitmapFactory.decodeStream(input);
		// Log.d(LCAT, "the return bitmap is: " + result);
		return result;
	}
}
